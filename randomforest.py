# -*- coding: utf-8 -*-
"""RandomForest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YTqxSxPrVK790Cep7V2LzYL-nXten6OA
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score



# Load the dataset
df = pd.read_csv('new.csv',encoding='ISO-8859-1')

# Drop irrelevant columns
df = df.drop(['url','id','tradeTime', 'DOM'], axis=1)

# Check for missing values
print(df.isnull().sum())

# Remove rows with missing values
df = df.dropna()
# remove the rows with 'Î´Öª' in the constructionTime column
df = df[df['constructionTime'].apply(lambda x: str(x).isdigit())]


# Convert categorical variables to dummy variables
df = pd.get_dummies(df, columns=["district", "floor", "buildingType"])

# Split the data into training and test sets
X = df.drop(["totalPrice"], axis=1)
y = df["totalPrice"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Random Forest model
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Make predictions on the test set
y_pred = rf.predict(X_test)

# Calculate evaluation metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
accuracy = rf.score(X_test, y_test)

# Plot feature importances
feature_importances = pd.Series(rf.feature_importances_, index=X.columns)
feature_importances.nlargest(10).plot(kind="barh")
plt.title("Feature importances")
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.show()

# Print evaluation metrics
print("Mean squared error:", mse)
print("R2 score:", r2)
print("Accuracy score:", accuracy)