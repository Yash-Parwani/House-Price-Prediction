# -*- coding: utf-8 -*-
"""Decision Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YTqxSxPrVK790Cep7V2LzYL-nXten6OA
"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('new.csv',encoding='ISO-8859-1')

# Drop the unnecessary columns
data.drop(['url','id','tradeTime', 'DOM','floor'], axis=1, inplace=True)

# Drop rows with missing values
data.dropna(inplace=True)

# Convert the 'Construction time' column to numeric
data = data[data['constructionTime'] != 'Î´Öª']


# Split the data into features and target variable
X = data.drop(['totalPrice'], axis=1)
y = data['totalPrice']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create the decision tree regression model
dt_reg = DecisionTreeRegressor(random_state=42)

# Train the model on the training data
dt_reg.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = dt_reg.predict(X_test)

# Calculate the Mean Squared Error and R2 score of the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print('Mean Squared Error:', mse)
print('R2 score:', r2)

# Plot the actual vs predicted values
plt.scatter(y_test, y_pred, alpha=0.2)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Decision Tree Regression')
plt.show()